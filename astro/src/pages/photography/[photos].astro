---
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import fs from 'node:fs';
import path from 'node:path';

interface ImageInfo {
  path: string;
  url: string;
  alt: string;
}

interface Props {
  category: any;
  images: ImageInfo[];
}

export async function getStaticPaths() {
  const photography = await getCollection("photography");

  function getImagesFromCategory(category: string) {
    const categoryPath = path.join(process.cwd(), 'public', 'assets', 'images', 'photography', category.toLowerCase());
    console.log('Looking for images in directory:', categoryPath);

    try {
      const files = fs.readdirSync(categoryPath);
      console.log('Found files:', files);

      const images = files
        .filter(file => /\.(jpg|jpeg|png|gif)$/i.test(file))
        .map(file => {
          // Ensure consistent path format without leading slash
          const relativePath = path.join('assets', 'images', 'photography', category.toLowerCase(), file).replace(/\\/g, '/');
          return {
            path: relativePath,
            url: relativePath,
            alt: path.basename(file, path.extname(file))
          };
        });

      console.log(`Found ${images.length} images for category ${category}:`, images);
      return images;
    } catch (error) {
      console.error(`Error reading directory for category ${category}:`, error);
      return [];
    }
  }

  const paths = photography.map((category) => {
    const images = getImagesFromCategory(category.id);
    return {
      params: {
        photos: category.id,
      },
      props: {
        category,
        images
      },
    };
  });

  return paths;
}

const { category, images } = Astro.props;
console.log(`Rendering ${images.length} images for category:`, category.id);
---

<Layout>
  <div class="flex-col-center page">
    <h2 class="title-case">Photography
      &nbsp;
      <Icon name="quill--chevron-right" />
      &nbsp;
      {category.data.title}
    </h2>
    <div class="page-content">
      <div class="category-description">
        {category.data.description}
      </div>
      <div class="image-grid" id="imageGrid">
        {images.map((image, index) => (
          <div class="image-container" data-index={index}>
            <img
              src={`/${image.url}`}
              alt={image.alt}
              loading="lazy"
              decoding="async"
              class="photo"
            />
            <div class="placeholder"></div>
          </div>
        ))}
      </div>
    </div>
  </div>
</Layout>

<script>
  function setupLazyLoading() {
    const images = document.querySelectorAll<HTMLImageElement>('.photo');
    console.log('Setting up lazy loading for images:', images.length);

    images.forEach((img, index) => {
      const container = img.closest('.image-container');
      const placeholder = container?.querySelector('.placeholder');

      img.addEventListener('load', () => {
        console.log(`Image ${index} loaded:`, img.src);
        placeholder?.remove();
        img.classList.add('loaded');
        container?.classList.add('loaded');
      });

      img.addEventListener('error', (e) => {
        console.error(`Error loading image ${index}:`, img.src, e);
        container?.classList.add('error');

        // Try both with and without leading slash
        if (img.src.startsWith(window.location.origin + '/')) {
          const newSrc = img.src.slice(window.location.origin.length + 1);
          console.log(`Retrying without leading slash: ${newSrc}`);
          img.src = newSrc;
        } else if (!img.src.startsWith('/')) {
          const newSrc = '/' + img.src;
          console.log(`Retrying with leading slash: ${newSrc}`);
          img.src = newSrc;
        }
      });
    });
  }

  document.addEventListener('DOMContentLoaded', setupLazyLoading);
</script>

<style>
  .page-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }

  .image-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    width: 100%;
    padding: 1rem;
  }

  .image-container {
    position: relative;
    aspect-ratio: 3/2;
    width: 100%;
    min-height: 200px;
    overflow: hidden;
    border-radius: 8px;
    background: var(--background-color);
    transition: transform 0.3s ease;
  }

  .image-container:hover {
    transform: scale(1.02);
  }

  .placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
    background-size: 200% 100%;
    animation: shimmer 1.5s linear infinite;
    z-index: 1;
  }

  .photo {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 2;
  }

  .photo.loaded {
    opacity: 1;
  }

  .image-container.error .placeholder {
    background: #ffebee;
  }

  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }

  @media (max-width: 1024px) {
    .image-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 640px) {
    .image-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
