---
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import fs from 'node:fs';
import path from 'node:path';

interface ImageInfo {
  path: string;
  url: string;
  thumbnail: string;
  alt: string;
}

interface Props {
  category: any;
  images: ImageInfo[];
}

export async function getStaticPaths() {
  const photography = await getCollection("photography");
  console.log('Found photography categories:', photography.map(cat => cat.id));

  function getImagesFromCategory(category: string) {
    try {
      function getThumbnailPath(imagePath: string): string {
        const { dir, name } = path.parse(imagePath);
        const thumbnailPath = path.join(dir, 'thumbnails', `${name}.png`).replace(/\\/g, '/');
        console.log('Thumbnail path generation:', {
          originalPath: imagePath,
          parsedDir: dir,
          parsedName: name,
          thumbnailPath
        });
        return thumbnailPath;
      }

      // Debug current working directory and environment
      const debugInfo = {
        cwd: process.cwd(),
        env: process.env.NODE_ENV,
        platform: process.platform
      };
      console.log('Debug environment:', debugInfo);

      // Try both relative and absolute paths
      const relativePath = path.join('public', 'assets', 'images', 'photography', category.toLowerCase());
      const absolutePath = path.join(process.cwd(), relativePath);

      // Check paths
      const pathChecks = {
        relative: {
          path: relativePath,
          exists: fs.existsSync(relativePath)
        },
        absolute: {
          path: absolutePath,
          exists: fs.existsSync(absolutePath)
        }
      };
      console.log('Path checks:', pathChecks);

      // Use the first path that exists
      const categoryPath = [absolutePath, relativePath].find(p => fs.existsSync(p));
      
      if (!categoryPath) {
        console.warn('No valid path found for category:', category);
        return [];
      }

      console.log('Using path:', categoryPath);

      // List directory contents
      const dirContents = fs.readdirSync(categoryPath, { withFileTypes: true });
      console.log('Directory contents:', {
        category,
        path: categoryPath,
        items: dirContents.map(item => ({
          name: item.name,
          type: item.isDirectory() ? 'directory' : 'file'
        }))
      });

      const files = dirContents
        .filter(item => item.isFile())
        .map(item => item.name);

      // Process images
      const images = files.reduce((acc, file) => {
        if (/\.(jpg|jpeg|png|gif)$/i.test(file) && !file.includes('thumbnails/')) {
          const relativePath = path.join('assets', 'images', 'photography', category.toLowerCase(), file).replace(/\\/g, '/');
          const image = {
            path: relativePath,
            url: relativePath,
            thumbnail: getThumbnailPath(relativePath),
            alt: path.basename(file, path.extname(file))
          };
          console.log('Processed image:', {
            category,
            originalFile: file,
            paths: image
          });
          acc.push(image);
        }
        return acc;
      }, [] as ImageInfo[]);

      console.log('Image processing results:', {
        category,
        totalFiles: files.length,
        processedImages: images.length,
        sampleImage: images[0]
      });

      return images;
    } catch (error) {
      console.error('Error details:', {
        category,
        error: error instanceof Error ? {
          message: error.message,
          stack: error.stack
        } : error
      });
      return [];
    }
  }

  const paths = await Promise.all(
    photography.map(async (category) => ({
      params: { photos: category.id },
      props: {
        category,
        images: getImagesFromCategory(category.id)
      }
    }))
  );

  return paths;
}

const { category, images } = Astro.props;
console.log(`Rendering ${images.length} images for category:`, category.id);
---

<Layout>
  <div class="flex-col-center page">
    <h2 class="title-case">Photography
      &nbsp;
      <Icon name="quill--chevron-right" />
      &nbsp;
      {category.data.title}
    </h2>
    <div class="page-content">
      <div class="category-description">
        {category.data.description}
      </div>
      <div class="image-grid" id="imageGrid">
        {images.map((image, index) => (
          <div class="image-container" data-index={index}>
            <img
              src={`/${image.thumbnail}`}
              data-full-src={`/${image.url}`}
              alt={image.alt}
              loading="lazy"
              decoding="async"
              class="photo thumbnail"
            />
            <div class="placeholder"></div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <!-- Modal for full-size image -->
  <div id="imageModal" class="modal">
    <button class="modal-close">&times;</button>
    <img class="modal-content" id="modalImage" />
  </div>
</Layout>

<script>
  function setupImageViewer() {
    const images = document.querySelectorAll<HTMLImageElement>('.photo.thumbnail');
    const modal = document.getElementById('imageModal') as HTMLDivElement;
    const modalImg = document.getElementById('modalImage') as HTMLImageElement;
    const closeBtn = modal.querySelector('.modal-close') as HTMLButtonElement;
    
    console.log('Setting up image viewer for', images.length, 'images');

    // Handle thumbnail loading
    images.forEach((img, index) => {
      const container = img.closest('.image-container');
      const placeholder = container?.querySelector('.placeholder');

      // Set initial state
      img.style.opacity = '0';
      
      // Debug loading state
      console.log(`Initial thumbnail state ${index}:`, {
        src: img.src,
        complete: img.complete,
        naturalWidth: img.naturalWidth,
        hasContainer: !!container,
        hasPlaceholder: !!placeholder
      });

      // Handle already loaded images
      if (img.complete && img.naturalWidth > 0) {
        console.log(`Thumbnail ${index} already loaded:`, img.src);
        img.style.opacity = '1';
        img.classList.add('loaded');
        container?.classList.add('loaded');
        placeholder?.remove();
      }

      img.addEventListener('load', () => {
        console.log(`Thumbnail ${index} load event:`, {
          src: img.src,
          complete: img.complete,
          naturalWidth: img.naturalWidth
        });
        img.style.opacity = '1';
        img.classList.add('loaded');
        container?.classList.add('loaded');
        placeholder?.remove();
      });

      img.addEventListener('error', (e) => {
        console.error(`Error loading thumbnail ${index}:`, {
          src: img.src,
          error: e
        });
        container?.classList.add('error');
        if (placeholder) {
          placeholder.textContent = 'Failed to load image';
          placeholder.classList.add('error-message');
        }
      });

      // Add click handler to view full image
      container?.addEventListener('click', () => {
        const fullSrc = img.getAttribute('data-full-src');
        if (fullSrc) {
          modal.style.display = 'flex';
          modalImg.src = fullSrc;
          modalImg.alt = img.alt;
        }
      });
    });

    // Close modal when clicking close button or outside the image
    closeBtn.addEventListener('click', () => {
      modal.style.display = 'none';
      modalImg.src = '';
    });

    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.style.display = 'none';
        modalImg.src = '';
      }
    });

    // Handle keyboard events
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal.style.display === 'flex') {
        modal.style.display = 'none';
        modalImg.src = '';
      }
    });
  }

  document.addEventListener('DOMContentLoaded', setupImageViewer);
</script>

<style>
  .page-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }

  .image-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    width: 100%;
    padding: 1rem;
  }

  .image-container {
    position: relative;
    aspect-ratio: 3/2;
    width: 100%;
    min-height: 200px;
    overflow: hidden;
    border-radius: 8px;
    background: var(--background-color);
    transition: transform 0.3s ease;
    cursor: pointer;
  }

  .image-container:hover {
    transform: scale(1.02);
  }

  .placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(110deg, #ececec 8%, #f5f5f5 18%, #ececec 33%);
    background-size: 200% 100%;
    animation: shimmer 1.5s linear infinite;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #666;
    text-align: center;
    padding: 1rem;
  }

  .placeholder.error-message {
    background: #ffebee;
    animation: none;
  }

  .photo {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease;
  }

  .photo.thumbnail {
    z-index: 2;
    opacity: 0; /* Start hidden */
  }

  .photo.loaded {
    opacity: 1;
  }

  .image-container.error .placeholder {
    background: #ffebee;
  }

  /* Modal styles */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    padding: 2rem;
  }

  .modal-content {
    max-width: 90%;
    max-height: 90vh;
    object-fit: contain;
    border-radius: 4px;
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 2rem;
    color: white;
    font-size: 2rem;
    font-weight: bold;
    cursor: pointer;
    background: none;
    border: none;
    padding: 0.5rem;
    line-height: 1;
  }

  .modal-close:hover {
    color: #ccc;
  }

  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }

  @media (max-width: 1024px) {
    .image-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 640px) {
    .image-grid {
      grid-template-columns: 1fr;
    }
    .modal-content {
      max-width: 95%;
    }
  }
</style>
